-- 执行存储过程_通知消息批准 (JobServerBroker.ExecuteProcedure())
EDBCD2D84ACA524414059750D4623D83
PKG_SEND_MAIL_PRO.P_NOTIFY_MESSAGE_APPROVE
-- 查询所有市场所有行情数据 (TTRD_XSWAP_MD_QUOTE_PUSH.QueryAll())
1B5692AB04BD4A6F6651952DBBF65B24
SELECT A.I_CODE_ORD AS SECURITYID,
                         T.BID_NUMBEROFORDERS1,
                         T.OFFER_NUMBEROFORDERS1,
                         T.BID_PX1,
                         TO_CHAR(TO_NUMBER(T.BID_TRADEVOLUME1) / 1000000) AS BID_TRADEVOLUME1,
                         TO_CHAR(NVL(T.BID_ENTRYSIZE1,0) / 1000000) AS BID_ENTRYSIZE1,
                         T.OFFER_PX1,
                         TO_CHAR(TO_NUMBER(T.OFFER_TRADEVOLUME1) / 1000000) AS OFFER_TRADEVOLUME1,
                         TO_CHAR(NVL(T.OFFER_ENTRYSIZE1,0) / 1000000) AS OFFER_ENTRYSIZE1,
                         T.UPDATETIME,
                         A.A_TYPE,
                         A.IS_TYPE
                         FROM  VTRD_TIRXSWAP A
                         LEFT JOIN TTRD_XSWAP_MD_QUOTE_PUSH T  on A.I_CODE_ORD = T.SECURITYID AND T.MDBOOKTYPE = 1
                         WHERE A.IS_TYPE = '2' OR A.IS_TYPE = '42'
                         UNION ALL
                         SELECT A.I_CODE_ORD AS SECURITYID,
                         T.BID_NUMBEROFORDERS1,
                         T.OFFER_NUMBEROFORDERS1,
                         T.BID_PX1,
                         TO_CHAR(TO_NUMBER(T.BID_TRADEVOLUME1) / 10000000) AS BID_TRADEVOLUME1,
                         TO_CHAR(NVL(T.BID_ENTRYSIZE1,0) / 10000000) AS BID_ENTRYSIZE1,
                         T.OFFER_PX1,
                         TO_CHAR(TO_NUMBER(T.OFFER_TRADEVOLUME1) / 10000000) AS OFFER_TRADEVOLUME1,
                         TO_CHAR(NVL(T.OFFER_ENTRYSIZE1,0) / 10000000) AS OFFER_ENTRYSIZE1,
                         T.UPDATETIME,
                         A.A_TYPE,
                         A.IS_TYPE
                         FROM  VTRD_TIRXSWAP A
                         LEFT JOIN TTRD_XSWAP_MD_QUOTE_PUSH T  on A.I_CODE_ORD = T.SECURITYID AND T.MDBOOKTYPE = 1
                         WHERE A.IS_TYPE = '43'
-- 系列监视器 (MonitorTIR_SERIES.DoMonitor())
3C122BA1011BF79CD1024702E5F9C1F3
SELECT I_CODE, A_TYPE, M_TYPE, COUNT(1) AS COUNTS FROM TIR_SERIES GROUP BY I_CODE, A_TYPE, M_TYPE
-- 查询最新的授信操作请求 (TTRD_XSWAP_CREDIT.QueryLastCreditReq())
FF45E3709407F929D5A24E9AE9EA5112
SELECT SYSREQID,STATUS,ERRCODE,ERRINFO,'TTRD_XSWAP_RISKLIMIT_CP' AS KEY FROM
                           (SELECT * FROM TTRD_XSWAP_RISKLIMIT_QRY WHERE CLEARINGMETHOD IS NULL ORDER BY UPDATETIME DESC) WHERE ROWNUM=1
                           UNION
                           SELECT SYSREQID,STATUS,ERRCODE,ERRINFO,'TTRD_XSWAP_RISKLIMIT_CCP' AS KEY FROM
                             (SELECT * FROM TTRD_XSWAP_RISKLIMIT_QRY WHERE CLEARINGMETHOD='6' ORDER BY UPDATETIME DESC) WHERE ROWNUM=1
                           UNION
                           SELECT SYSREQID,STATUS,ERRCODE,ERRINFO,'TTRD_XSWAP_RISKRATIO_DETAIL' AS KEY FROM
                               (SELECT * FROM TTRD_XSWAP_RISKRATIO_QRY ORDER BY UPDATETIME DESC) WHERE ROWNUM=1
                           UNION
                           SELECT SYSREQID,STATUS,ERRCODE,ERRINFO,'TTRD_XSWAP_RISKLIMIT_SET' AS KEY FROM
                               (SELECT * FROM TTRD_XSWAP_RISKLIMIT_SET ORDER BY UPDATETIME DESC) WHERE ROWNUM=1
                           UNION
                           SELECT SYSREQID,TO_NUMBER(STATUS) AS STATUS,ERRCODE,ERRINFO,'TTRD_XSWAP_RISKRATIO_SET' AS KEY FROM
                               (SELECT * FROM TTRD_XSWAP_RISKRATIO_SET ORDER BY UPDATETIME DESC) WHERE ROWNUM=1
-- 查找全量到期确认指令单 (VTRD_FIX_QUOTE_REQ.QueryAllEndConfirmQuote())
CA2A3426834B83B6FA22CE4A8C7A2322
SELECT BB.*, '' AS TEXTREAL, '' AS REAL_USER FROM VTRD_FIX_ENDCONFIRM BB WHERE  BB.UPDATETIME > TO_CHAR(SYSDATE,'YYYY-MM-DD') AND BB.QUOTEDATE = TO_CHAR(SYSDATE,'YYYY-MM-DD')
-- 查询待更新指令 (TTRD_SEND_TRADE.Query())
F6DB434B6BB9FC7256FBB5D3FDCDB5C6
SELECT
T2.REF_TRADE,
T2.UPDATE_TIME,
T2.STATUS,
T2.TRDTYPE,
T2.REF_SYSORDID
FROM TTRD_SEND_TRADE T2
WHERE T2.STATUS <> 1
-- 查询需要补单的下行成交 (TTRD_CFETS_EXECUTIONREPORT.QueryNeedAutoCreateTrade())
0119D89ACB3433127259B44686A22A47
SELECT E.* FROM (SELECT * FROM VTRD_CFETS_EXECUTIONREPORT WHERE STATUS = '2' AND TRDDATE='2019-04-21') E
                                         LEFT JOIN TTRD_OTC_TRADE A ON A.EXTORDID=E.EXECID AND (E.CUSTODAIN_ACCT_NUMBER IS NULL OR E.CUSTODAIN_ACCT_NUMBER = A.SECU_EXT_ACCID)
                                         WHERE A.SYSORDID IS NULL
                                         AND EXISTS (SELECT 1 FROM VTRD_CFETS_EXEC_AUTO_TRADER T WHERE T.TRADER=E.TRADER)
-- 更新定时任务状态 (TSYS_CRON.UpdateCronInfo())
CC379CCCB8B5E75E5043D3B55F0FFF17
update TSYS_CRON t set 
  t.COUNT = t.COUNT+1
, t.PREVIOUS_FIRE_TIME= :PREVIOUS_FIRE_TIME
, t.NEXT_FIRE_TIME= :NEXT_FIRE_TIME where t.ID= :ID
-- 获取逆回购到期成交编号(不存在首期报价) (VTRD_FIX_QUOTE_REQ.GetRepoMinusEndExecid_UnExistFstQuote())
ED40E735422065B209527756041247BC
SELECT B.SYSORDID, A.EXECID
  FROM TTRD_FIX_EXEC_REPORT A
 INNER JOIN TTRD_OTC_TRADE B ON A.ORIGTRADEDATE = B.ORDDATE
                            AND A.EXECREFID = B.EXTORDID
                            AND B.TRDTYPE = '41'
                            AND B.ORDSTATUS = 7
                            AND B.EXE_MARKET = 'XSHG_FIX'
INNER JOIN TTRD_OTC_IBLB D ON B.INTORDID = D.I_CODE
  LEFT JOIN TTRD_FIX_QUOTE_BILLS C ON B.SYSORDID =
                                      SUBSTR(C.CLIENTREQID,
                                             0,
                                             INSTR(C.CLIENTREQID, '-') - 1)
 WHERE A.APPID = '613'
   AND A.SIDE = '2'
   AND D.END_EXTORDID IS NULL
   AND C.QUOTEDATE IS NULL
   AND A.DEALDATE = TO_CHAR(SYSDATE,'YYYY-MM-DD')
-- 获取数据库日期 (DBFactory.GetDateFromDataBase())
9642852279FC7048B97CC68BAA0206CE
SELECT TO_CHAR(SYSDATE,'YYYY-MM-DD') FROM DUAL
-- 获取数据库日期 (DBFactory.GetDatabaseDateTime())
67FBBED7615D8421624215254CD969EE
SELECT SYSDATE FROM DUAL
-- 根据登录用户查找债券 (TBND.Query()) [可能存在变化参数]
E3580829EE4D314ED7CDC0DC1CE97F23
SELECT AA.*,
       BA.B_GRADE_INNER,
       BA.B_GRADE_INNER_ADJUST,
       BA.B_GRADE_INNER_CREDIT,
       BA.B_GRADE,
       BA.B_RATING_INSTITUTION,
       JA.B_ISSUER_RATING_OUTLOOK,
       JA.B_ISSUER_GRADE_INNER,
       JA.B_ISSUER_GRADE_INNER_ADJUST,
       JA.B_ISSUER_GRADE_INNER_CREDIT,
       JA.B_ISSUER_GRADE,
       JA.B_ISSUER_RATING_INSTITUTION,
       KA.B_WARRANTOR_GRADE_INNER_ADJUST,
       KA.B_WARRANTOR_GRADE_INNER_CREDIT,
       KA.B_WARRANTOR_RATING_OUTLOOK,
       KA.B_WARRANTOR_GRADE_INNER,
       KA.B_WARRANTOR_GRADE,
       KA.B_WARRANTOR_RATING_INSTITUTION,
       NVL(NVL(DD.B_VOLUME, B_ACTUAL_ISSUE_AMOUNT),0) AS B_VOLUME,
       NVL(DD1.B_VOLUME_SENIOR, 0) B_VOLUME_SENIOR,
       NVL(DD2.B_VOLUME_ALL, 0) B_VOLUME_ALL,
       FF.AO_PROP_VALUE,
       HH.COMP_TYPE B_ISSUER_TYPE,
       HH.CORP_TYPE,
       HH.NATURE,
       HH.REGION,
       HH.COMP_PROPERTY,
       GG.BOOK_DATE,
       SS.COLLECTION_SCALE,
       MM.INDUSTRY_CODE_2,
       MM.INDUSTRY_CODE_1,
       SS.COLLECTION_TYPE,
       TT.EQUITYPERSON,
       UU.BASKET_I_CODE AS TRIPARTYREPOBASKET,
       UU.BASKET_DISCOUNT AS TRIPARTYREPODISCOUNT,
       KK.EXERCISE_REG_END_DATE
  FROM TBND AA
  LEFT JOIN (SELECT I_CODE,A_TYPE,M_TYPE,
                    MAX(CASE WHEN B_RATING_TYPE = '0' THEN B_GRADE ELSE '' END) AS B_GRADE,
                    MAX(CASE WHEN B_RATING_TYPE = '0' THEN B_RATING_INSTITUTION ELSE '' END) AS B_RATING_INSTITUTION,
                    MAX(CASE WHEN B_RATING_TYPE = '1' THEN B_GRADE ELSE '' END) AS B_GRADE_INNER,
                    MAX(CASE WHEN B_RATING_TYPE = '2' THEN B_GRADE ELSE '' END) AS B_GRADE_INNER_ADJUST,
                    MAX(CASE WHEN B_RATING_TYPE = '3' THEN B_GRADE ELSE '' END) AS B_GRADE_INNER_CREDIT
               FROM TBND_EXT_RATING XX
              WHERE BEG_DATE <= TO_CHAR(SYSDATE, 'YYYY-MM-DD')
                AND END_DATE > TO_CHAR(SYSDATE, 'YYYY-MM-DD')
              GROUP BY I_CODE, A_TYPE, M_TYPE) BA ON BA.I_CODE = AA.I_CODE 
                                                 AND BA.A_TYPE = AA.A_TYPE
                                                 AND BA.M_TYPE = AA.M_TYPE
--单个金融工具流通量
  LEFT JOIN TBND_ISSUE DD ON AA.I_CODE = DD.I_CODE
                         AND AA.A_TYPE = DD.A_TYPE
                         AND AA.M_TYPE = DD.M_TYPE
                         AND TO_DATE(DD.BEG_DATE, 'YYYY-MM-DD') <= SYSDATE
                         AND TO_DATE(DD.END_DATE, 'YYYY-MM-DD') > SYSDATE
--优先级流通量
  LEFT JOIN (SELECT ROUND(SUM(B_VOLUME_SENIOR), 10) AS B_VOLUME_SENIOR,B_NAME_FULL2
               FROM (SELECT DD1_TBND.B_NAME_FULL2,
                            SUM(NVL(NVL(DD1_ISSUE.B_VOLUME,DD1_TBND.B_ACTUAL_ISSUE_AMOUNT),0)) / COUNT(1) AS B_VOLUME_SENIOR
                       FROM VBND_ABS DD1_TBND
                      LEFT JOIN TBND_ISSUE DD1_ISSUE ON DD1_TBND.I_CODE =
                                                         DD1_ISSUE.I_CODE
                                                     AND DD1_TBND.A_TYPE =
                                                         DD1_ISSUE.A_TYPE
                                                     AND DD1_TBND.M_TYPE =
                                                         DD1_ISSUE.M_TYPE
                                                     AND TO_DATE(DD1_ISSUE.BEG_DATE,
                                                                 'YYYY-MM-DD') <=
                                                         SYSDATE
                                                     AND TO_DATE(DD1_ISSUE.END_DATE,
                                                                 'YYYY-MM-DD') >
                                                         SYSDATE
                      WHERE  DD1_TBND.B_SENIORITY = 'Senior'
                      GROUP BY DD1_TBND.B_NAME_FULL2, DD1_TBND.B_NAME_FULL)
              GROUP BY B_NAME_FULL2) DD1 ON DD1.B_NAME_FULL2 =
                                            AA.B_NAME_FULL2
--资产包流通量
  LEFT JOIN (SELECT ROUND(SUM(B_VOLUME_ALL), 10) AS B_VOLUME_ALL,B_NAME_FULL2
               FROM (SELECT DD1_TBND2.B_NAME_FULL2,
                            SUM(NVL(NVL(DD1_ISSUE2.B_VOLUME,DD1_TBND2.B_ACTUAL_ISSUE_AMOUNT),0)) / COUNT(1) AS B_VOLUME_ALL
                       FROM VBND_ABS DD1_TBND2
                      LEFT JOIN TBND_ISSUE DD1_ISSUE2 ON DD1_TBND2.I_CODE =
                                                          DD1_ISSUE2.I_CODE
                                                      AND DD1_TBND2.A_TYPE =
                                                          DD1_ISSUE2.A_TYPE
                                                      AND DD1_TBND2.M_TYPE =
                                                          DD1_ISSUE2.M_TYPE
                                                      AND TO_DATE(DD1_ISSUE2.BEG_DATE,
                                                                  'YYYY-MM-DD') <=
                                                          SYSDATE
                                                      AND TO_DATE(DD1_ISSUE2.END_DATE,
                                                                  'YYYY-MM-DD') >
                                                          SYSDATE
                      GROUP BY DD1_TBND2.B_NAME_FULL2, DD1_TBND2.B_NAME_FULL)
              GROUP BY B_NAME_FULL2) DD2 ON DD2.B_NAME_FULL2 =
                                            AA.B_NAME_FULL2
  LEFT JOIN TATTROBJ_PROP_DATA FF ON FF.AO_CLAS_CODE = 'B_ISSUER'
                                 and FF.AO_PROP_CODE = 'ISS_TYPE'
                                 and FF.AO_VALUE = AA.B_ISSUER
                                 AND FF.BEG_DATE <=
                                     TO_CHAR(SYSDATE, 'YYYY-MM-DD')
                                 AND FF.END_DATE >
                                     TO_CHAR(SYSDATE, 'YYYY-MM-DD')
  LEFT JOIN (SELECT D_CODE, MAX(BOOK_DATE) BOOK_DATE
               FROM TBND_BOOKDATES
              GROUP BY D_CODE) GG ON AA.D_CODE = GG.D_CODE
  LEFT JOIN TCOMPANY HH ON AA.B_ISSUER = HH.COMP_NAME
  LEFT JOIN (SELECT COMP_NAME,MAX(CASE WHEN RATING_TYPE = '0' THEN GRADE ELSE '' END) AS B_ISSUER_GRADE,
                 MAX(CASE WHEN RATING_TYPE = '0' THEN RATING_INSTITUTION ELSE '' END) AS B_ISSUER_RATING_INSTITUTION,
                 MAX(CASE WHEN RATING_TYPE = '0' THEN OUTLOOK ELSE '' END) AS B_ISSUER_RATING_OUTLOOK,
                 MAX(CASE WHEN RATING_TYPE = '1' THEN GRADE ELSE '' END) AS B_ISSUER_GRADE_INNER,
                 MAX(CASE WHEN RATING_TYPE = '2' THEN GRADE ELSE '' END) AS B_ISSUER_GRADE_INNER_ADJUST,
                 MAX(CASE WHEN RATING_TYPE = '3' THEN GRADE ELSE '' END) AS B_ISSUER_GRADE_INNER_CREDIT
               FROM TCOMPANY_RATING XX
              WHERE BEG_DATE <= TO_CHAR(SYSDATE, 'YYYY-MM-DD')
                AND END_DATE > TO_CHAR(SYSDATE, 'YYYY-MM-DD')
              GROUP BY COMP_NAME) JA ON JA.COMP_NAME= AA.B_ISSUER
  LEFT JOIN (SELECT COMP_NAME,MAX(CASE WHEN RATING_TYPE = '0' THEN GRADE ELSE '' END) AS B_WARRANTOR_GRADE,
                 MAX(CASE WHEN RATING_TYPE = '0' THEN RATING_INSTITUTION ELSE '' END) AS B_WARRANTOR_RATING_INSTITUTION,
                 MAX(CASE WHEN RATING_TYPE = '0' THEN OUTLOOK ELSE '' END) AS B_WARRANTOR_RATING_OUTLOOK,
                 MAX(CASE WHEN RATING_TYPE = '1' THEN GRADE ELSE '' END) AS B_WARRANTOR_GRADE_INNER,
                 MAX(CASE WHEN RATING_TYPE = '2' THEN GRADE ELSE '' END) AS B_WARRANTOR_GRADE_INNER_ADJUST,
                 MAX(CASE WHEN RATING_TYPE = '3' THEN GRADE ELSE '' END) AS B_WARRANTOR_GRADE_INNER_CREDIT
               FROM TCOMPANY_RATING XX
              WHERE BEG_DATE <= TO_CHAR(SYSDATE, 'YYYY-MM-DD')
                AND END_DATE > TO_CHAR(SYSDATE, 'YYYY-MM-DD')
              GROUP BY COMP_NAME) KA ON KA.COMP_NAME= AA.B_WARRANTOR                             
  LEFT JOIN TTRD_BIDD_PRIMARY_SELF SS ON AA.D_CODE = SS.D_CODE
  LEFT JOIN TCOMPANY_INDUSTRY MM ON MM.COMP_NAME = AA.B_ISSUER
                                AND (MM.INDUSTRY_CODE_2 IS NOT NULL OR MM.INDUSTRY_CODE_1 IS NOT NULL)
                                AND INDUSTRY_SOURCE = 'SAC04'
                                AND MM.BEG_DATE <=
                                    TO_CHAR(SYSDATE, 'YYYY-MM-DD')
                                AND MM.END_DATE >
                                    TO_CHAR(SYSDATE, 'YYYY-MM-DD')
--原始权益人
LEFT JOIN (SELECT TD.DCODE DCODE,WMSYS.WM_CONCAT(TC.COMP_NAME) AS EQUITYPERSON FROM 
                         (SELECT TI.ISSUECODE ISSUECODE, 
                          TI.INST_CODE INSTCODE,
                          TB.D_CODE    DCODE
                          FROM TBND_INSTITUTION TI
                          LEFT JOIN XIR_TRD.TTRD_BIDD_INFO TB 
                          ON TI.ISSUECODE = TB.ISSUE_CODE WHERE TI.INST_TYPE = '13') TD
                          LEFT JOIN TCOMPANY TC
                          ON TD.INSTCODE = TC.COMP_CODE WHERE TD.DCODE IS NOT NULL GROUP BY TD.DCODE) TT
                          ON AA.D_CODE = TT.DCODE AND AA.B_AS_TYPE='ABS'
--三方回购篮子及折价率
LEFT JOIN VTRIPARTYREPOBASKET UU
    ON AA.A_TYPE = UU.A_TYPE
   AND AA.M_TYPE = UU.M_TYPE
   AND AA.I_CODE = UU.I_CODE    
LEFT JOIN VBND_EXERCISE_REG KK 
    ON AA.A_TYPE = KK.A_TYPE
   AND AA.M_TYPE = KK.M_TYPE
   AND AA.I_CODE = KK.I_CODE    
 WHERE 1=1 
 AND AA.B_MTR_DATE >='2017-07-08' ORDER BY AA.HOST_MARKET DESC,AA.I_CODE
-- 获取交易终止系统交易对应的成交确认的影子交易 (TTRD_OTC_TRADE.QueryConfirmedNonTrades())
0B248B3292BA4AD32E93BDB35E4CAD5D
SELECT A.*,
       B.ORDDATE          AS R_ORDDATE,
       B.SYSORDID         AS R_SYSORDID,
       B.RATIO,
       B.RESERVE,
       B.RESERVE_MONEY,
       C.ORDDATE          AS CP_R_ORDDATE,
       C.SYSORDID         AS CP_R_SYSORDID,
       C.RATIO            AS CP_RATIO,
       C.RESERVE          AS CP_RESERVE,
       C.RESERVE_MONEY      AS CP_RESERVE_MONEY,
       TSI.INST_ID,
       TSI.BIZ_AUDIT,
       TSI.ACC_AUDIT,
       TSI.SET_AUDIT,
       TSI.STATE          AS SET_STATE,
       TSI.BJ_STATE,
       TSI.DESC_DB,
       TSI2.INST_ID       AS INST_ID_END,
       TSI2.BIZ_AUDIT     AS BIZ_AUDIT_END,
       TSI2.ACC_AUDIT     AS ACC_AUDIT_END,
       TSI2.SET_AUDIT     AS SET_AUDIT_END,
       TSI2.STATE         AS SET_STATE_END,
       TSI2.BJ_STATE      AS BJ_STATE_END,
       TSI2.DESC_DB       AS DESC_DB_END,
       NVL(TE.SYSORDID,0) AS TE_SYSORDID,
       TE.IS_SELFBOND,
       TE.SEALSTATUS,
       TE.THEORYMEDIATION_FEE,
       TE.IS_ANONYMITY,
       TE.UPDATE_UID AS TE_UPDATE_UID,       --修改人
       TE.UPDATE_TIME AS TE_UPDATE_TIME,     --修改时间
       TE.NET_TIME,                          --交易清算时间
       TE.SPLIT_SYSORDID,                    --拆单宿主交易编号
       TE.AGAIN_APPROVED_STATUS,             --重新送审状态
       TE.OCCUPY_BOND_PREMIUM,               --占券溢价
       TE.IS_INVOICED,                       --是否已开票
       TE.AUTOTOMERGENUM,                    --合并约定号TT6621
       TE.REAL_INVOICED_PARTYID,             --实际开票对手
       TE.NEED_NET_DATE,                     --记录主要字段(影响清算)的最新修改时间
       TE.UPDATE_TIME_MAIN_FIELDS,           --记录待清算日期
       TE.BEGDATE_VALID,                     --XSwap指令有效开始时间
       TE.ENDDATE_VALID,                     --XSwap指令有效结束时间
       TE.IS_EMERGENT,                       --是否紧急
       TE.ACTUAL_PARTY_LINKMAN,              --实际交易对手联系人信息
       TE.CFETS_BND_TRDTYPE,                 --交易类型
       TE.CFETS_TRADEMETHOD,                 --交易方式
       TE.IS_LIMITED_PRICE,                  --是否限价,用于一篮子批量下单，默认为是；
       TE.IS_SET_OCFLAG,                     --是否下单时自动计算开平
       TE.IS_HEDGE,                          --是否对冲
       TE.CFETS_UP_QUOTETYPE,                --外汇上行2.0报价类型
       TE.CFETS_UP_QUOTEID,                  --外汇上行2.0请求报价编号
       TE.EXCELEXPORTEDSTATUS,               --是否导出
       TE.ORDER_SENT_SPV,                    --是否成功下单（招商spv投资指令）
       TE.MATCH_STATE,                       --匹配状态
       TE.IS_INCLUDE_IN_POSITION,             --是否计入头寸
       TE.IRS_CONFIRM_STATUS,
       TE.IRS_WRITEOFF_ID,
       TE.TERMINATE_SETTYPE,                 --终止结算方式（利率互换终止使用）
       TE.TERMINATE_TYPE,                     --冲销类别（利率互换终止使用）
       TE.GC_SYSORDID,                       --轧差界面宿主交易SYSORDID
       TE.GC_SYSORDID_END,                   --轧差界面宿主到期交易SYSORDID
       TE.FIXED_PAYMENTDATE,
       TE.REAL_PAYMENTDATE,
       TE.FIXED_NOTIONAL_REC,
       TE.FIXED_NOTIONAL_PAY,
       TE.FIXED_INTEREST_REC,
       TE.FIXED_INTEREST_PAY,
       TE.REAL_NOTIONAL_REC,
       TE.REAL_NOTIONAL_PAY,
       TE.REAL_INTEREST_REC,
       TE.REAL_INTEREST_PAY,
       TE.HAS_REPORT,                       --是否报备
       TE.EXECSTATE,                        --确认交易执行|标记
       TE.EXECCONUSER,                      --确认交易执行|确认人
       TE.EXECCONTIME,                      --确认交易执行|确认时间
       TE.EXT_FLOW_ID,                      --外部交易流水号
       TE.BILL_TYPE,
       TE.BILL_MEDIUM,
       TE.CLEAR_TYPE,
       TE.PRINT_CODE                   --打印编号
  FROM TTRD_OTC_TRADE A
  LEFT JOIN TTRD_OTC_RESERVE B
    ON A.SYSORDID = B.SYSORDID
   AND B.PARTYTYPE = '1'
  LEFT JOIN TTRD_OTC_RESERVE C
    ON A.SYSORDID = C.SYSORDID
   AND C.PARTYTYPE = '0'
  LEFT JOIN TTRD_SET_INSTRUCTION TSI
    ON A.FST_INST_ID=TSI.INST_ID
  LEFT JOIN TTRD_SET_INSTRUCTION TSI2
    ON A.END_INST_ID=TSI2.INST_ID
  LEFT JOIN TTRD_OTC_TRADE_EXTEND TE
    ON A.SYSORDID=TE.SYSORDID
INNER JOIN TTRD_OTC_TRADE D ON A.EXTORDID=D.INTORDID
WHERE    A.ORDSTATUS=7 AND D.ORDSTATUS=10
-- 查询市场状态 (TTRD_CFETS_TRADE_MKTSTATUS.QueryMktStatus())
A9B5E32585AEA1465DD6F234D4181C4F
select TRADSESSTATUS  from TTRD_CFETS_TRADE_MKTSTATUS where MARKETINDICATOR =:MARKETINDICATOR   and TRADEMETHOD =:TRADEMETHOD order by updatetime desc
-- 查找任务 (TTRD_EXH_IMP_TASK.QueryTasks())
5EDF024A2669EF950E10F62EA01E3CFC
SELECT * FROM TTRD_EXH_IMP_TASK T WHERE T.DISABLE = 0
-- 插入执行日志 (TSYS_JOB_LOG.Insert())
CBCED333804BC9C45EE54728D06E7773
insert into TSYS_JOB_LOG(ID, JOB_ID, JOB_NAME, EXECUTION_TYPE, EXECUTION_DATE, EXECUTION_TIME, RESULT, MSG)
values(:ID, :JOB_ID, :JOB_NAME, :EXECUTION_TYPE, :EXECUTION_DATE, :EXECUTION_TIME, :RESULT, :MSG)
-- 执行存储过程_交易组存档 (JobServerBroker.ExecuteProcedure())
CB5191A56D7507EDF66AAF913B6857A7
PKG_SEND_MAIL_PRO.SP_TRADEGROUP_ARCHIVE
-- 查询详细行情 (TTRD_XSWAP_MD_QUOTE_PUSH.QueryDetailQuoteMarketList())
2C276D37B5CA9A2BD1F71D45E4C31714
SELECT V.SECURITYID,
                            V.BID_NUMBEROFORDER,
                            V.OFFER_NUMBEROFORDERS,
                            V.BID_PX,
                            TO_CHAR(TO_NUMBER(V.BID_TRADEVOLUME) /TO_NUMBER(CASE WHEN R.MARKETINDICATOR='43' THEN 10000000 ELSE 1000000 END)) AS BID_TRADEVOLUME1,
                            TO_CHAR(TO_NUMBER(V.BID_ENTRYSIZE) /TO_NUMBER(CASE WHEN R.MARKETINDICATOR='43' THEN 10000000 ELSE 1000000 END)) AS BID_ENTRYSIZE1,
                            V.OFFER_PX,
                            TO_CHAR(TO_NUMBER(V.OFFER_TRADEVOLUME) /TO_NUMBER(CASE WHEN R.MARKETINDICATOR='43' THEN 10000000 ELSE 1000000 END)) AS OFFER_TRADEVOLUME1,
                            TO_CHAR(TO_NUMBER(V.OFFER_ENTRYSIZE) /TO_NUMBER(CASE WHEN R.MARKETINDICATOR='43' THEN 10000000 ELSE 1000000 END))  AS OFFER_ENTRYSIZE1,
                            V.UPDATETIME
                            FROM VTTRD_XSWAP_MD_QUOTE_PUSH V
                                LEFT JOIN (SELECT MARKETINDICATOR,MDREQID FROM  TTRD_XSWAP_MD_QUOTE_REQ) R ON V.MDREQID = R.MDREQID
                            ORDER BY V.STALLS
-- 查找买断式回购交易 (TTRD_OTC_OUTRIGHT.Query())
EE45D8B4622F61C6D3BFE640BB60CEF2
SELECT A.*,B.I_NAME,B.TRDTYPE,B.PARTYID,COALESCE(C.RT_L_AMOUNT*100,PARVALUE) AS PARVALUE_REMAIN
FROM XIR_TRD.TTRD_OTC_OUTRIGHT A 
INNER JOIN XIR_TRD.TTRD_OTC_TRADE B 
ON A.I_CODE = B.I_CODE AND A.A_TYPE = B.A_TYPE AND A.M_TYPE = B.M_TYPE
LEFT JOIN TTRD_ACC_BALANCE_SECU C 
ON A.I_CODE = C.I_CODE AND A.A_TYPE = C.A_TYPE AND A.M_TYPE = C.M_TYPE
WHERE A.I_CODE=:I_CODE AND 
      A.A_TYPE=:A_TYPE AND 
      A.M_TYPE=:M_TYPE
-- 保存消息 (TTRD_FLOW_ALLINONE.InsertMessageInfo())
43A33E357660701E22B2388E27377FF3
INSERT INTO TTRD_MSG_MESSAGE (MSG_ID, SRC_MSG_ID, MAKER, CREATE_TIME, TITLE, MSG_LEVEL, REQ_REPLY, SRC_TYPE, ARG1, ARG2, MSG_BODY) VALUES(:MSG_ID, :SRC_MSG_ID, :MAKER, :CREATE_TIME, :TITLE, :MSG_LEVEL, :REQ_REPLY, :SRC_TYPE, :ARG1, :ARG2, :MSG_BODY)
-- 查询与发行公告不关联的承分销交易的远期要素信息 (TTRD_OTC_FWDBOND.DistributionQueryWithoutPirmary())
E367939AB430A47731BE51B89ACA7D84
SELECT F.*, A.CASH_ACCID, A.CASH_EXT_ACCID,
P.ISSUE_CODE,
P.ISSUE_DATE,--招标日期
P.PAY_DATE,--缴款日期
M.D_CODE,M.B_ISSUE_DATE,M.B_LIST_DATE AS DEFAULT_B_LIST_DATE,M.SH_L_DATE,M.SZ_L_DATE,M.YH_L_DATE,M.PIPE_ID,
B.D_CODE AS MD_D_CODE,B.B_ISSUE_DATE AS MD_B_ISSUE_DATE, B.B_LIST_DATE AS MD_B_LIST_DATE, B.PIPE_ID AS MD_PIPE_ID
FROM TTRD_OTC_FWDBOND F 
INNER JOIN   TTRD_OTC_TRADE A ON A.I_CODE=F.I_CODE
LEFT JOIN   TTRD_BIDD_BOND_CODE C ON F.U_I_CODE = C.I_CODE AND F.U_A_TYPE=C.A_TYPE AND F.U_M_TYPE=C.M_TYPE 
LEFT JOIN   TTRD_BIDD_BOND M ON C.D_CODE = M.D_CODE
LEFT JOIN   TTRD_BIDD_INFO I ON M.D_CODE = I.D_CODE
LEFT JOIN   TTRD_BIDD_PRIMARY P ON P.ISSUE_CODE = I.ISSUE_CODE
LEFT JOIN xir_md.TBND B ON F.U_I_CODE=B.I_CODE AND F.U_M_TYPE=B.M_TYPE
WHERE A.ORDDATE >= '2013-01-01' AND A.TRDTYPE IN ('60','61','62') AND A.ORDSTATUS = 7 AND (F.B_LIST_DATE IS NULL OR F.B_LIST_DATE='2050-12-31')  AND 
      F.I_CODE NOT IN (SELECT F.I_CODE
                      FROM TTRD_OTC_FWDBOND F 
                      INNER JOIN   TTRD_OTC_TRADE A ON A.I_CODE=F.I_CODE
                      INNER JOIN   TTRD_TRDGRP G ON A.GRPID = G.GRPID
                      INNER JOIN   TTRD_BIDD_PRIMARY P ON P.ISSUE_CODE = G.ISSUE_CODE
                      INNER JOIN   TTRD_BIDD_INFO I ON P.ISSUE_CODE = I.ISSUE_CODE
                      INNER JOIN   TTRD_BIDD_BOND M ON I.D_CODE = M.D_CODE
                      INNER JOIN   TTRD_BIDD_BOND_CODE C ON F.U_I_CODE = C.I_CODE AND F.U_A_TYPE=C.A_TYPE AND F.U_M_TYPE=C.M_TYPE AND M.D_CODE=C.D_CODE
                      WHERE A.ORDDATE >= '2013-01-01' AND A.TRDTYPE IN ('60','61','62') AND A.ORDSTATUS = 7 AND (F.B_LIST_DATE IS NULL OR F.B_LIST_DATE='2050-12-31') )
ORDER BY F.U_I_CODE, F.ENDSETDATE, F.I_CODE, P.ISSUE_DATE
-- 加载限定日期的非标 (TTRD_CASHLB.Query())
09357E75DB6F0FC23AD16456A20C429B
SELECT A.*,G.*,
NVL(B.B_VOLUME, 0) AS B_VOLUME,
C.ACCID,
C.ACCID_DETAIL,
D.B_GRADE AS C_EXT_RATING,
F.GRADE AS C_ISSUER_EXT_RATING,
BA.RECENTLY_INNER_RATING,
CA.RECENTLY_INNER_RATING_ISSUER,
DA.RECENTLY_IN_RATING_WARRANTOR
FROM TTRD_CASHLB A 
LEFT JOIN TWLTH_ACC_CASH_MAPPING C ON C.I_CODE=A.I_CODE
    AND C.A_TYPE=A.A_TYPE
    AND C.M_TYPE=A.M_TYPE
LEFT JOIN xir_md.TBND_ISSUE B ON A.I_CODE = B.I_CODE
    AND A.A_TYPE = B.A_TYPE
    AND A.M_TYPE = B.M_TYPE
    AND B.BEG_DATE <= TO_CHAR(SYSDATE, 'YYYY-MM-DD')
    AND B.END_DATE > TO_CHAR(SYSDATE, 'YYYY-MM-DD')
LEFT JOIN xir_md.TBND_EXT_RATING D ON A.I_CODE = D.I_CODE
    AND A.A_TYPE = D.A_TYPE
    AND A.M_TYPE = D.M_TYPE
    AND D.B_RATING_TYPE = '0'
    AND D.BEG_DATE <= TO_CHAR(SYSDATE, 'YYYY-MM-DD')
    AND D.END_DATE > TO_CHAR(SYSDATE, 'YYYY-MM-DD')
LEFT JOIN xir_md.TCOMPANY_RATING F ON A.ISSUER = F.COMP_NAME
    AND F.RATING_TYPE = '0'
    AND F.BEG_DATE <= TO_CHAR(SYSDATE, 'YYYY-MM-DD')
    AND F.END_DATE > TO_CHAR(SYSDATE, 'YYYY-MM-DD')
LEFT JOIN TTRD_EXT_PROPERTY_DATA G ON A.A_TYPE ||'_'|| A.M_TYPE ||'_'|| A.I_CODE = G.F50 
LEFT JOIN (SELECT I_CODE, A_TYPE, M_TYPE,
                    MAX(CASE WHEN B_RATING_TYPE = '1' THEN B_GRADE ELSE  '' END) AS RECENTLY_INNER_RATING
               FROM xir_md.TBND_EXT_RATING XX
              WHERE BEG_DATE <= TO_CHAR(SYSDATE, 'YYYY-MM-DD')
                AND END_DATE > TO_CHAR(SYSDATE, 'YYYY-MM-DD')
              GROUP BY I_CODE, A_TYPE, M_TYPE) BA ON BA.I_CODE = A.I_CODE
                                                 AND BA.A_TYPE = A.A_TYPE
                                                 AND BA.M_TYPE = A.M_TYPE
LEFT JOIN (SELECT COMP_NAME,
                    MAX(CASE WHEN RATING_TYPE = '1' THEN GRADE ELSE  '' END) AS RECENTLY_INNER_RATING_ISSUER
               FROM xir_md.TCOMPANY_RATING XX
              WHERE BEG_DATE <= TO_CHAR(SYSDATE, 'YYYY-MM-DD')
                AND END_DATE > TO_CHAR(SYSDATE, 'YYYY-MM-DD')
              GROUP BY COMP_NAME) CA ON CA.COMP_NAME = A.ISSUER
LEFT JOIN (SELECT COMP_NAME,
                    MAX(CASE WHEN RATING_TYPE = '1' THEN GRADE ELSE  '' END) AS RECENTLY_IN_RATING_WARRANTOR
               FROM xir_md.TCOMPANY_RATING XX
              WHERE BEG_DATE <= TO_CHAR(SYSDATE, 'YYYY-MM-DD')
                AND END_DATE > TO_CHAR(SYSDATE, 'YYYY-MM-DD')
              GROUP BY COMP_NAME) DA ON DA.COMP_NAME = A.WARRANTOR
WHERE A.MTR_DATE >= :MTR_DATE
-- 获取当前\下个清算日兑息兑付类的结算指令 (TTRD_SET_INSTRUCTION.QueryPackForCashPosT0T1orWMSTNLimit())
A3A8F35351301601C22219D2FB029791
SELECT
    A.*
    ,B.INST_SECU_ID AS B_INST_SECU_ID, B.INST_ID AS B_INST_ID, B.BIZTYPE AS B_BIZTYPE, B.I_CODE AS B_I_CODE, B.A_TYPE AS B_A_TYPE, B.M_TYPE AS B_M_TYPE, B.RT_L_AMOUNT AS B_RT_L_AMOUNT, B.RT_L_COST AS B_RT_L_COST, B.RT_L_COST_NET AS B_RT_L_COST_NET, B.RT_L_COST_AI AS B_RT_L_COST_AI, B.RT_L_COST_FEE AS B_RT_L_COST_FEE, B.BJ_STATE AS B_BJ_STATE, B.OPERATOR AS B_OPERATOR, B.SETTLE_BIZTYPE AS B_SETTLE_BIZTYPE, B.BEG_DATE AS B_BEG_DATE, B.END_DATE AS B_END_DATE, B.MEMO AS B_MEMO, B.CREATE_TIME AS B_CREATE_TIME, B.UPDATE_USER AS B_UPDATE_USER, B.UPDATE_TIME AS B_UPDATE_TIME, B.EXT_SERIALNO AS B_EXT_SERIALNO, B.RT_L_COST_AI_REAL AS B_RT_L_COST_AI_REAL, B.RT_L_COST_NET_REAL AS B_RT_L_COST_NET_REAL, B.RT_L_COST_AI_HIS_REAL AS B_RT_L_COST_AI_HIS_REAL, B.RT_L_FRE_AMOUNT AS B_RT_L_FRE_AMOUNT, B.RT_L_QUO_AMOUNT AS B_RT_L_QUO_AMOUNT, B.BJ_AMOUNT AS B_BJ_AMOUNT, B.BJ_DISCOUNT AS B_BJ_DISCOUNT, B.SECU_EXT_ACCID AS B_SECU_EXT_ACCID, B.SECU_ACCID AS B_SECU_ACCID, B.ACCOUNT_BIZ_FLAG AS B_ACCOUNT_BIZ_FLAG, B.ACCOUNT_FLAG AS B_ACCOUNT_FLAG, B.LS AS B_LS, B.RT_MARGINUSED AS B_RT_MARGINUSED
    ,C.INST_CASH_ID AS C_INST_CASH_ID, C.INST_ID AS C_INST_ID, C.P_INST_CASH_ID AS C_P_INST_CASH_ID, C.BIZTYPE AS C_BIZTYPE, C.CHGAMT_SELF AS C_CHGAMT_SELF, C.CHGAMT_CP AS C_CHGAMT_CP, C.CHGAMOUNT AS C_CHGAMOUNT, C.CHGAMOUNT_IO AS C_CHGAMOUNT_IO, C.STATE AS C_STATE, C.OPERATOR AS C_OPERATOR, C.PARTY_ACC_NAME AS C_PARTY_ACC_NAME, C.PARTY_BANK_ACC_NAME AS C_PARTY_BANK_ACC_NAME, C.PARTY_BANK_ACC_CODE AS C_PARTY_BANK_ACC_CODE, C.PARTY_BANK_CODE AS C_PARTY_BANK_CODE, C.PARTY_ZZDACCCODE AS C_PARTY_ZZDACCCODE, C.EXT_SERIALNO AS C_EXT_SERIALNO, C.EXT_VOU_CODE AS C_EXT_VOU_CODE, '' AS C_EXT_PKG_DATA, C.BEG_DATE AS C_BEG_DATE, C.END_DATE AS C_END_DATE, C.MEMO AS C_MEMO, C.CREATE_TIME AS C_CREATE_TIME, C.IS_CASH_FIXED AS C_IS_CASH_FIXED, C.UPDATE_USER AS C_UPDATE_USER, C.UPDATE_TIME AS C_UPDATE_TIME, C.CASH_EXT_ACCID AS C_CASH_EXT_ACCID, C.CASH_ACCID AS C_CASH_ACCID, C.ACCOUNT_USER AS C_ACCOUNT_USER, C.ACCOUNT_TIME AS C_ACCOUNT_TIME, C.BANK_CODE AS C_BANK_CODE, C.BANK_ACC_CODE AS C_BANK_ACC_CODE, C.BANK_ACC_NAME AS C_BANK_ACC_NAME, C.ACC_NAME AS C_ACC_NAME, C.TRANSFERTYPE AS C_TRANSFERTYPE, C.INST_CASH_BIZ_ID AS C_INST_CASH_BIZ_ID, C.PARTYID AS C_PARTYID, C.PARTYNAME AS C_PARTYNAME, C.PARTY_SHORTNAME AS C_PARTY_SHORTNAME, C.RESERVE_CASH_LOCATION AS C_RESERVE_CASH_LOCATION, C.OPERATOR_USER AS C_OPERATOR_USER, C.OPERATOR_TIME AS C_OPERATOR_TIME, C.EXE_USER AS C_EXE_USER, C.EXE_TIME AS C_EXE_TIME,C.PAY_FINISH_TIME AS C_PAY_FINISH_TIME,C.MONEYUSAGE AS C_MONEYUSAGE,C.CURRENCY AS C_CURRENCY,C.NOMINAL_CURRENCY AS C_NOMINAL_CURRENCY,C.EXCHANGE_RATE AS C_EXCHANGE_RATE
    ,D.INST_CASH_ID AS D_INST_CASH_ID, D.INST_ID AS D_INST_ID, D.P_INST_CASH_ID AS D_P_INST_CASH_ID, D.BIZTYPE AS D_BIZTYPE, D.CHGAMT_SELF AS D_CHGAMT_SELF, D.CHGAMT_CP AS D_CHGAMT_CP, D.CHGAMOUNT AS D_CHGAMOUNT, D.CHGAMOUNT_IO AS D_CHGAMOUNT_IO, D.STATE AS D_STATE, D.OPERATOR AS D_OPERATOR, D.PARTY_ACC_NAME AS D_PARTY_ACC_NAME, D.PARTY_BANK_ACC_NAME AS D_PARTY_BANK_ACC_NAME, D.PARTY_BANK_ACC_CODE AS D_PARTY_BANK_ACC_CODE, D.PARTY_BANK_CODE AS D_PARTY_BANK_CODE, D.PARTY_ZZDACCCODE AS D_PARTY_ZZDACCCODE, D.EXT_SERIALNO AS D_EXT_SERIALNO, D.EXT_VOU_CODE AS D_EXT_VOU_CODE, '' AS D_EXT_PKG_DATA, D.BEG_DATE AS D_BEG_DATE, D.END_DATE AS D_END_DATE, D.MEMO AS D_MEMO, D.CREATE_TIME AS D_CREATE_TIME, D.IS_CASH_FIXED AS D_IS_CASH_FIXED, D.UPDATE_USER AS D_UPDATE_USER, D.UPDATE_TIME AS D_UPDATE_TIME, D.CASH_EXT_ACCID AS D_CASH_EXT_ACCID, D.CASH_ACCID AS D_CASH_ACCID, D.ACCOUNT_USER AS D_ACCOUNT_USER, D.ACCOUNT_TIME AS D_ACCOUNT_TIME, D.BANK_CODE AS D_BANK_CODE, D.BANK_ACC_CODE AS D_BANK_ACC_CODE, D.BANK_ACC_NAME AS D_BANK_ACC_NAME, D.ACC_NAME AS D_ACC_NAME, D.TRANSFERTYPE AS D_TRANSFERTYPE, D.INST_CASH_BIZ_ID AS D_INST_CASH_BIZ_ID, D.PARTYID AS D_PARTYID, D.PARTYNAME AS D_PARTYNAME, D.PARTY_SHORTNAME AS D_PARTY_SHORTNAME, D.RESERVE_CASH_LOCATION AS D_RESERVE_CASH_LOCATION, D.OPERATOR_USER AS D_OPERATOR_USER, D.OPERATOR_TIME AS D_OPERATOR_TIME, D.EXE_USER AS D_EXE_USER, D.EXE_TIME AS D_EXE_TIME,D.PAY_FINISH_TIME AS D_PAY_FINISH_TIME,D.MONEYUSAGE AS D_MONEYUSAGE,D.CURRENCY AS D_CURRENCY,D.NOMINAL_CURRENCY AS D_NOMINAL_CURRENCY,D.EXCHANGE_RATE AS D_EXCHANGE_RATE
    ,E.INST_ID AS E_INST_ID,E.INST_LOCKED,E.INST_EXE_TYPE,E.INST_STATUS,E.INSTR_ID,E.INSTR_ORIGIN,E.INSTR_STATUS,E.INSTR_CP_CONFIRM,E.EXE_STATUS,E.EXE_TXFLOWID,E.WITHDRAW_STATUS,E.WITHDRAW_TXFLOWID,E.OPERATOR_USER,E.OPERATOR_TIME,E.EXE_USER,E.EXE_TIME,E.INSTR_CONFIRM,E.EXTORDID AS E_EXTORDID, E.INST_ID_END,E.I_CODE_CBGS, E.ADDTLINF, E.CSHMSTRACCT,E.QSS_INSTR_ORIGIN,E.QSS_INSTR_STATUS,E.QSS_INSTR_CONFIRM,E.QSS_INSTR_CP_CONFIRM,E.IS_MANUAL_SETTLE
    ,F.INST_ID AS F_INST_ID,F.CTRCT_INST_LOCKED,F.CTRCT_ID,F.CTRCT_STATUS,F.CTRCT_BLOCK_STATUS,F.CTRCT_STATUS_DESC,F.CTRCT_EXE_STATUS,F.CTRCT_EXE_TXFLOWID,F.CTRCT_WITHDRAW_STATUS,F.CTRCT_WITHDRAW_TXFLOWID,F.CTRCT_EXE_USER,F.CTRCT_EXE_TIME,F.QSS_CTRCT_STATUS,F.QSS_CASH_STATUS,F.QSS_SECU_STATUS,F.CBGS_ORDSTATUS_UPDATE_TIME
    ,G.INST_ID AS G_INST_ID,G.INST_CASH_ID AS G_INST_CASH_ID,G.SYSID AS G_SYSID,G.SQRQ AS G_SQRQ,G.HKRQ AS G_HKRQ,G.HKRYHDM AS G_HKRYHDM,G.SKRYHDM AS G_SKRYHDM,G.HKJJBZ AS G_HKJJBZ,G.HKYXJ AS G_HKYXJ,G.SHINE_STATUS AS G_SHINE_STATUS,G.SHINE_STATUS_DESC AS G_SHINE_STATUS_DESC,G.MEMO,G.MATCH_STATUS AS G_MATCH_STATUS,G.LSH AS G_LSH,G.SERIALNO AS G_SERIALNO,G.MEMO AS G_MEMO,G.JSBZ AS G_JSBZ,G.SHINE_EXE_STATUS AS G_SHINE_EXE_STATUS,G.MATCH_KEY AS G_MATCH_KEY,G.ZHLX AS G_ZHLX,G.SEND_DETAIL_STATUS AS G_SEND_DETAIL_STATUS,G.SEND_DETAIL_DESC AS G_SEND_DETAIL_DESC
FROM
    TTRD_SET_INSTRUCTION A
LEFT JOIN
    TTRD_SET_INSTRUCTION_SECU B ON A.INST_ID= B.INST_ID
LEFT JOIN
    TTRD_SET_INSTRUCTION_CASH C ON A.INST_ID= C.INST_ID
LEFT JOIN
    TTRD_SET_INSTRUCTION_CASH D ON C.P_INST_CASH_ID= D.INST_CASH_ID
LEFT JOIN
    TTRD_SET_INSTRUCTION_EXE E ON (A.INST_ID= E.INST_ID OR A.INST_ID= E.INST_ID_END)
LEFT JOIN
    TTRD_SET_INSTRUCTION_EXEHT F ON A.INST_ID= F.INST_ID
LEFT JOIN
    TTRD_SET_INSTRUCTION_CASH_EXE G ON ((G.INST_ID > 0 AND C.INST_CASH_ID = G.INST_CASH_ID AND C.P_INST_CASH_ID <=0) OR (G.INST_ID<=0 AND C.P_INST_CASH_ID = G.INST_CASH_ID))
INNER JOIN TTRD_SET_INSTRUCTION_CASH CC ON A.INST_ID = CC.INST_ID
INNER JOIN
(SELECT A.CASH_EXT_ACCID, A.ACCID, A.BEG_DATE,MIN(CD.CAL_DAY) AS NEXT_DATE
FROM TTRD_ACC_BALANCE_CASH A
LEFT JOIN XIR_MD.TCALENDAR_DATES CD ON CD.CAL_CODE='CHINA_IB' AND CD.CAL_FLAG=1 AND CD.CAL_DAY > A.BEG_DATE
GROUP BY A.CASH_EXT_ACCID, A.ACCID, A.BEG_DATE
) POS ON A.CASH_ACCID=POS.ACCID AND A.CASH_EXT_ACCID=POS.CASH_EXT_ACCID
AND ((A.SETDATE<POS.BEG_DATE AND (A.SETDATE_REAL=POS.BEG_DATE OR A.SETDATE_REAL=POS.NEXT_DATE)) OR A.SETDATE=POS.BEG_DATE OR A.SETDATE=POS.NEXT_DATE)
WHERE
    ( A.BIZTYPE IN ('8100','8101','8201','8200','44_END','45_END','48_END','49_END','8105','140','82_END','82_CAP','82_INTE','82_PREEND','83_PREEND','83_END','83_CAP','83_INTE','810_INTE','810_END','8300','8102'))
ORDER BY
    A.INST_ID